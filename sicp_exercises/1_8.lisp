#!/usr/bin/racket
#lang racket/base

(define (improve guess radicand) (/ (+ (/ radicand (* guess guess)) (* 2 guess)) 3))
(define (calc-guess guess old-guess) (if (= old-guess 0) guess (/ (abs(- old-guess guess)) old-guess)))
(define (good-enough? guess old-guess) (< (calc-guess guess old-guess) 0.001)) 

(define (cubert-iter guess radicand number-of-iterations old-guess)
  (cond ((good-enough? guess old-guess) (printf "\n  result: ~a, iterations: ~a, and " guess number-of-iterations ) guess)
        (else (printf "\n  guess is: ~a" guess) (cubert-iter (improve guess radicand) radicand (+ number-of-iterations 1) guess))))
(define (cubert-impl radicand) (cubert-iter 1.0 radicand 1 0))

(define (error-in-cubert-impl radicand)
  (printf "Radicand: ~a, " radicand )
  (- (expt radicand (/ 1 3))
     (cubert-impl radicand)))
(define (process radicand) (printf "error: ~a\n" (error-in-cubert-impl radicand)))

(process 0.0000000001)
(process 0.000000001)
(process 0.00000001)
(process 0.0000001)
(process 0.000001)
(process 0.00001)
(process 0.0001)
(process 0.001)
(process 0.01)
(process 0.1)
(process 1)
(process 10)
(process 100)
(process 1000)
(process 10000)
(process 100000)
(process 1000000)
(process 10000000)
(process 100000000)
(process 1000000000)
(process 10000000000)
(process 100000000000)
